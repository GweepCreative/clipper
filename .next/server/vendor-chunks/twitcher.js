"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/twitcher";
exports.ids = ["vendor-chunks/twitcher"];
exports.modules = {

/***/ "(ssr)/./node_modules/twitcher/index.js":
/*!****************************************!*\
  !*** ./node_modules/twitcher/index.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\n\r\n\r\nclass Twitcher {\r\n    #token;\r\n    #client_id;\r\n    #client_secret;\r\n\r\n    /*\r\n    * Base class for Twitcher\r\n    * @param {string} token - Twitch API token\r\n    * @param {string} client_id - Twitch API client id\r\n    * @param {string} client_secret - Twitch API client secret\r\n    */\r\n    constructor({ token, client_id, client_secret }) {\r\n        this.#token = token;\r\n        this.#client_id = client_id;\r\n        this.#client_secret = client_secret;\r\n    }\r\n\r\n    /**\r\n    * Get Twitch API token\r\n    * @returns {object} - Twitch API token\r\n    */\r\n    async getToken() {\r\n        let res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`https://id.twitch.tv/oauth2/token?client_id=${this.#client_id}&client_secret=${this.#client_secret}&grant_type=client_credentials`)\r\n        return res.data;\r\n    }\r\n\r\n    /**\r\n    * Get Twitch Clip\r\n    * @param {string} clipURL - Twitch clip URL\r\n    * @returns {object} - Twitch clip\r\n    * @example\r\n    * let clip = await client.getClip(\"https://clips.twitch.tv/IncredulousTastyPoxPJSugar\")\r\n    * console.log(clip)\r\n    * // {\r\n    * //   success: true,\r\n    * //   streamer: {\r\n    * //     id: '123456789',\r\n    * //     login: 'streamer',\r\n    * //     display_name: 'Streamer',\r\n    * //     type: '',\r\n    * //     broadcaster_type: 'partner',\r\n    * //     description: 'Streamer',\r\n    * //     profile_image_url: 'https://static-cdn.jtvnw.net/jtv_user_pictures/123456789-profile_image-300x300.png',\r\n    * //     offline_image_url: 'https://static-cdn.jtvnw.net/jtv_user_pictures/123456789-channel_offline_image-1920x1080.png',\r\n    * //     view_count: 123456789\r\n    * //   },\r\n    * //   creator: {\r\n    * //     id: '123456789',\r\n    * //     login: 'creator',\r\n    * //     display_name: 'Creator',\r\n    * //     type: '',\r\n    * //     broadcaster_type: 'partner',\r\n    * //     description: 'Creator',\r\n    * //     profile_image_url: 'https://static-cdn.jtvnw.net/jtv_user_pictures/123456789-profile_image-300x300.png',\r\n    * //     offline_image_url: 'https://static-cdn.jtvnw.net/jtv_user_pictures/123456789-channel_offline_image-1920x1080.png',\r\n    * //     view_count: 123456789\r\n    * //   },\r\n    * //   clip: {\r\n    * //     id: 'IncredulousTastyPoxPJSugar',\r\n    * //     url: 'https://clips.twitch.tv/IncredulousTastyPoxPJSugar',\r\n    * //     video_url: 'https://clips-media-assets2.twitch.tv/AT-cm%7C123456789.mp4',\r\n    * //     embed_url: 'https://clips.twitch.tv/embed?clip=IncredulousTastyPoxPJSugar',\r\n    * //     video_id: '123456789',\r\n    * //     game_id: '123456789',\r\n    * //     language: 'en',\r\n    * //     title: 'Streamer',\r\n    * //     view_count: 123456789,\r\n    * //     created_at: '2021-01-01T00:00:00Z',\r\n    * //     thumbnail_url: 'https://clips-media-assets2.twitch.tv/AT-cm%7C123456789-preview-480x272.jpg',\r\n    * //     duration: 30.01,\r\n    * //     vod_offset: 0.0,\r\n    * //     is_featured: false\r\n    * //   }\r\n    * // }\r\n    */\r\n    async getClip(clipURL) {\r\n        let clipId = '';\r\n        if (clipURL.includes(\"https://clips.twitch.tv/\")) {\r\n            clipId = clipURL.replace(\"https://clips.twitch.tv/\", \"\");\r\n        } else if (clipURL.includes(\"https://www.twitch.tv/\") && clipURL.includes(\"/clip/\")) {\r\n            clipId = clipURL.replace(\"https://www.twitch.tv/\", \"\");\r\n        }\r\n\r\n      \r\n\r\n        let res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.twitch.tv/helix/clips?id=\" + clipId, {\r\n            headers: {\r\n                \"Authorization\": `Bearer ${this.#token}`,\r\n                \"Client-Id\": this.#client_id\r\n            }\r\n        })\r\n        if (res.data.data.length == 0) return {\r\n            error: \"Clip not found\",\r\n            success: false\r\n        };\r\n        let streamerInfo = (await this.searchUserByUserId(res.data.data[0].broadcaster_id)).data[0];\r\n        let creatorInfo = (await this.searchUserByUserId(res.data.data[0].creator_id)).data[0];\r\n        let VideoURL = res.data.data[0].thumbnail_url.replace(/-preview.*$/, '.mp4');\r\n        return {\r\n            success: true,\r\n            streamer: streamerInfo,\r\n            creator: creatorInfo,\r\n            clip: {\r\n                id: res.data.data[0].id,\r\n                url: res.data.data[0].url,\r\n                video_url: VideoURL,\r\n                embed_url: res.data.data[0].embed_url,\r\n                video_id: res.data.data[0].video_id,\r\n                game_id: res.data.data[0].game_id,\r\n                language: res.data.data[0].language,\r\n                title: res.data.data[0].title,\r\n                view_count: res.data.data[0].view_count,\r\n                created_at: res.data.data[0].created_at,\r\n                thumbnail_url: res.data.data[0].thumbnail_url,\r\n                duration: res.data.data[0].duration,\r\n                vod_offset: res.data.data[0].vod_offset,\r\n                is_featured: res.data.data[0].is_featured\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Get Game\r\n     * @param {Number} game_id - Twitch game id\r\n     * @returns {object} - Twitch Game\r\n     * @example\r\n     * let game = await client.getGameById(\"123456789\")\r\n     * console.log(game)\r\n     * //response:\r\n     * {\r\n            \"data\": [\r\n                {\r\n                    \"id\": \"33214\",\r\n                    \"name\": \"Fortnite\",\r\n                    \"box_art_url\": \"https://static-cdn.jtvnw.net/ttv-boxart/33214-{width}x{height}.jpg\",\r\n                    \"igdb_id\": \"1905\"\r\n                }\r\n                ...\r\n            ],\r\n            \"pagination\": {\r\n            \"cursor\": \"eyJiIjpudWxsLCJhIjp7IkN\"\r\n        }\r\n     */\r\n    async getGameById(game_id) {\r\n        if (typeof game_id !== \"number\") {\r\n            game_id = Number(game_id)\r\n            if (isNaN(game_id)) return {\r\n                error: \"Game id must be number\",\r\n                success: false\r\n            }\r\n        }\r\n        const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.twitch.tv/helix/games?id=\" + game_id, {\r\n            headers: {\r\n                Authorization: `Bearer ${this.#token}`,\r\n                \"Client-Id\": this.#client_id\r\n            }\r\n        });\r\n        if (res.data.data.length == 0) return {\r\n            error: \"Game not found\",\r\n            success: false\r\n        }\r\n        return {\r\n            success: true,\r\n            data: res.data.data\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get Game\r\n     * @param {string} game_name - Twitch game name\r\n     * @returns {object} - Twitch Game\r\n     * @example\r\n     * let game = await client.getGameByName(\"Fortnite\")\r\n     * console.log(game)\r\n     * //response:\r\n     * {\r\n     *  success: true,\r\n     * data: [\r\n     * {\r\n     * id: '33214',\r\n     * name: 'Fortnite',\r\n     * box_art_url: 'https://static-cdn.jtvnw.net/ttv-boxart/33214-{width}x{height}.jpg',\r\n     * igdb_id: '1905'\r\n     * }\r\n     * ]\r\n     * }\r\n     */\r\n    async getGameByName(game_name) {\r\n        const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.twitch.tv/helix/games?name=\" + game_name, {\r\n            headers: {\r\n                Authorization: `Bearer ${this.#token}`,\r\n                \"Client-Id\": this.#client_id\r\n            }\r\n        });\r\n        if (res.data.data.length == 0) return {\r\n            error: \"Game not found\",\r\n            success: false\r\n        }\r\n        return {\r\n            success: true,\r\n            data: res.data.data\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Search Twitch Channel\r\n    * @param {string} channelName - Twitch channel name\r\n    * @returns {object} - Twitch channel\r\n    * @example\r\n    * let channel = await client.searchChannel(\"Streamer\")\r\n    * console.log(channel)\r\n    * //[\r\n  //{\r\n   // broadcaster_language: 'tr',\r\n  //  broadcaster_login: 'gweepcreative',\r\n  //  display_name: 'GweepCreative',\r\n  //  game_id: '516575',\r\n  //  game_name: 'VALORANT',\r\n //   id: '571983883',\r\n  //  is_live: false,\r\n  //  tag_ids: [],\r\n  //  tags: [ 'oyun', 'ghosts', 'valorant', 'espor', 'ESports', 'Türkçe' ],\r\n  //  thumbnail_url: 'https://static-cdn.jtvnw.net/jtv_user_pictures///f618ba01-c0cb-45b1-930d-64a01b5568c9-profile_image-300x300.png',\r\n  //  title: 'RANKED VALO',\r\n  //  started_at: ''\r\n // },\r\n // {\r\n  //  broadcaster_language: '',\r\n  //  broadcaster_login: 'gweep_creative',\r\n  //  display_name: 'gweep_creative',\r\n  //  game_id: '0',\r\n  //  game_name: '',\r\n   // id: '606695369',\r\n   // is_live: false,\r\n  //  tag_ids: [],\r\n  //  tags: [],\r\n  //  thumbnail_url: 'https://static-cdn.jtvnw.net/user-default-pictures-uv/ce57700a-def9-11e9-842d-784f43822e80-profile_image-300x300.png',\r\n  //  title: '',\r\n //   started_at: ''\r\n // },\r\n  // ...\r\n]\r\n    */\r\n    async searchChannel(channelName) {\r\n        const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.twitch.tv/helix/search/channels?query=\" + channelName, {\r\n            headers: {\r\n                Authorization: `Bearer ${this.#token}`,\r\n                \"Client-Id\": this.#client_id\r\n            }\r\n        });\r\n        return res.data.data;\r\n\r\n    }\r\n\r\n    /**\r\n     * Search Twitch User\r\n     * @param {string} userName - Twitch user name\r\n     * @returns {object} - Twitch user\r\n     * @example\r\n     * let user = await client.searchUserByName(\"Streamer\")\r\n     * console.log(user)\r\n     * // {\r\n     * //   success: true,\r\n     * //   data: [\r\n     * //     {\r\n     * //       id: '123456789',\r\n     * //       login: 'streamer',\r\n     * //       display_name: 'Streamer',\r\n     * //       type: '',\r\n     * //       broadcaster_type: 'partner',\r\n     * //       description: 'Streamer',\r\n     * //       profile_image_url: 'https://static-cdn.jtvnw.net/jtv_user_pictures/123456789-profile_image-300x300.png',\r\n     * //       offline_image_url: 'https://static-cdn.jtvnw.net/jtv_user_pictures/123456789-channel_offline_image-1920x1080.png',\r\n     * //       view_count: 123456789\r\n     * //     }\r\n     * //   ]\r\n     * // }\r\n     */\r\n    async searchUserByName(userName) {\r\n        const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.twitch.tv/helix/users?login=\" + userName, {\r\n            headers: {\r\n                Authorization: `Bearer ${this.#token}`,\r\n                \"Client-Id\": this.#client_id\r\n            }\r\n        });\r\n        if (res.data.data.length == 0) return {\r\n            error: \"User not found\",\r\n            success: false\r\n        }\r\n        return {\r\n            success: true,\r\n            data: res.data.data\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Search Twitch User\r\n     * @param {string} userId - Twitch user id\r\n     * @returns {object} - Twitch user\r\n     * @example\r\n     * let user = await client.searchUserByUserId(\"123456789\")\r\n     * console.log(user)\r\n     * // {\r\n     * //   success: true,\r\n     * //   data: [\r\n     * //     {\r\n     * //       id: '123456789',\r\n     * //       login: 'streamer',\r\n     * //       display_name: 'Streamer',\r\n     * //       type: '',\r\n     * //       broadcaster_type: 'partner',\r\n     * //       description: 'Streamer',\r\n     * //       profile_image_url: 'https://static-cdn.jtvnw.net/jtv_user_pictures/123456789-profile_image-300x300.png',\r\n     * //       offline_image_url: 'https://static-cdn.jtvnw.net/jtv_user_pictures/123456789-channel_offline_image-1920x1080.png',\r\n     * //       view_count: 123456789\r\n     * //     }\r\n     * //   ]\r\n     * // }\r\n     */\r\n    async searchUserByUserId(userId) {\r\n        const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.twitch.tv/helix/users?id=\" + userId, {\r\n            headers: {\r\n                Authorization: `Bearer ${this.#token}`,\r\n                \"Client-Id\": this.#client_id\r\n            }\r\n        });\r\n        if (res.data.data.length == 0) return {\r\n            error: \"User not found\",\r\n            success: false\r\n        }\r\n        return {\r\n            success: true,\r\n            data: res.data.data\r\n        };\r\n    }\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Twitcher);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/twitcher/index.js\n");

/***/ })

};
;